<?phpnamespace AppBundle\Controller;use AppBundle\Entity\Actividad;use AppBundle\Entity\Aeropuerto;use AppBundle\Entity\Ciudad;use AppBundle\Entity\Cliente;use AppBundle\Entity\Comentario;use AppBundle\Entity\Contrato;use AppBundle\Entity\Direccion;use AppBundle\Entity\Evento;use AppBundle\Entity\Foto;use AppBundle\Entity\Hotel;use AppBundle\Entity\Itinerario;use AppBundle\Entity\Pais;use AppBundle\Entity\Promocion;use AppBundle\Entity\Salon;use AppBundle\Entity\Sesion;use AppBundle\Entity\Usuario;use AppBundle\Entity\Viaje;use AppBundle\Entity\Tag;use AppBundle\Form\Registrar\RegPaisType;use AppBundle\Form\Registrar\RegCiudadType;use AppBundle\Form\ActividadType;use AppBundle\Form\AeropuertoType;use AppBundle\Form\CiudadType;use AppBundle\Form\ClienteType;use AppBundle\Form\ComentarioType;use AppBundle\Form\ContratoType;use AppBundle\Form\DireccionType;use AppBundle\Form\EventoType;use AppBundle\Form\FotoType;use AppBundle\Form\HotelType;use AppBundle\Form\ItinerarioType;use AppBundle\Form\PaisType;use AppBundle\Form\PromocionType;use AppBundle\Form\SalonType;use AppBundle\Form\SesionType;use AppBundle\Form\UsuarioType;use AppBundle\Form\ViajeType;use AppBundle\Form\TagType;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use Symfony\Component\HttpFoundation\Request;use JMS\SecurityExtraBundle\Annotation\Secure;class EntityCreatorController extends Controller/** * Casi todos los router hacen uso del twig general de carga de datos que es * members/generalRegister.html.twig. */{    /**     * @Route("/registrar/pais", name="registrarPais");     * @param Request $request     * @return \Symfony\Component\HttpFoundation\Response     * @Secure(roles="ROLE_ADMIN")     */    public function regPais(Request $request){/* * Este controller hace uso de la clase RegPaisType que permite visualizar * los paises actualmente cargados en la base de datos y ademas proporciona * un checkbox para permitir el registro en la base de datos de un nuevo pais.  */        $form = $this->createForm(RegPaisType::class);        $form->handleRequest($request);                if ($form->isValid()){			$defaultObjEntity = $form->getData()->getPais(); //form esta ligado al objeto RegPais			$em = $this->getDoctrine()->getManager();            $em->persist($defaultObjEntity);            $em->flush();        }        return $this->render(            'registrar/regPais.html.twig',			array('form' => $form->createView())        );    }	//---------------------------------------------------------------    /**     * @Route("/registrar/ciudad", name="registrarCiudad");     * @param Request $request     * @return \Symfony\Component\HttpFoundation\Response     * @Secure(roles="ROLE_ADMIN")     */    public function regCiudad(Request $request){/* * CiudadType hace uso de la misma "tecnica" usada en RegPaisType solo que * la implementa directamente sobre CuidadType, de esta forma no es necesario * crear un objeto "extra" como en el caso de RegPaisType, que representa * a la entidad mapeada por el formType. *  */        $form = $this->createForm(CiudadType::class);        $form->handleRequest($request);                if ($form->isValid()){			$defaultObjEntity = $form->getData();			$em = $this->getDoctrine()->getManager();            $em->persist($defaultObjEntity);            $em->flush();        }        return $this->render('registrar/regCiudad.html.twig',			array('form' => $form->createView())        );            }    	//---------------------------------------------------------------	/**     * @Route("/registrar/direccion", name="registrarDireccion");     * @param Request $request     * @return \Symfony\Component\HttpFoundation\Response     * @Secure(roles="ROLE_ADMIN")     */    public function regDireccion(Request $request){/* DireccionType no funciona de manera analoga a la de CiudadType, como tal vez podria suponerse.  Cuando se configura DireccionType se puede especificar uno de los atributos como de tipo PaisType para invocar una instancia de PaisType, permitiendo la carga de un pais en el form de DireccionType.  Con esto, se podria pensar incluir un atributo de tipo CiudadType en DireccionType y asi ligar la funcionalidad lograda para ese form (esto es, permitir en el mismo form CiudadType el registro de un nuevo pais en caso que el mismo no figure en el SelectBox que el form CiudadType presenta). Pero debido a los distintos javascript que deben ejecutarse en concordancia con las especificaciones de CiudadType esto no funcionaria. Aun con las modificaciones pertinentes en el javascript, DireccionType no logra la funcionalidad deseada. Esto es, permitir seleccionar una ciudad cargadada de la base de datos, pero si la misma no existe, entonces hacer lo que haria ciudadType: permitir cargar la nueva ciudad y luego permitir seleccionar el pais de la ciudad; si el pais no esta cargado entonces permitir cargarlo.   El problema no es meramente una cuestion de escribir la rutina javascript para que logre la funcionalidad buscada. Realmente hay que tratar de entender como poder lograr hacer funcionar esto. Es muy importante. Este problema no nos esta dejando hacer uso de forma limpia y modular la funcionalidad lograda en CiudadType.  DireccionType permite cargar una nueva ciudad (para un pais existente en la base de datos) si la misma no esta cargada en la base de datos, pero llega hasta ahi.  */        $form = $this->createForm(DireccionType::class);        $form->handleRequest($request);                if ($form->isValid()){			$defaultObjEntity = $form->getData();			$em = $this->getDoctrine()->getManager();            $em->persist($defaultObjEntity);            $em->flush();        }        return $this->render('registrar/regDireccion.html.twig',			array('form' => $form->createView())        );    }    //---------------------------------------------------------    /**     * @Route("/registrar/aeropuerto", name="registrarAeropuerto")     * @Secure(roles="ROLE_ADMIN")     */    public function showRegistrarAeropuerto(Request $request){		        return $this->showRegisterForm(AeropuertoType::class, new Aeropuerto(), $request);    }    /**     * @Route("/registrar/hotel", name="registrarHotel")     * @Secure(roles="ROLE_ADMIN")     */    public function showRegistrarHotel(Request $request){        return $this->showRegisterForm(HotelType::class, new Hotel(), $request);    }    /**     * @Route("/registrar/salon", name="registrarSalon")     * @Secure(roles="ROLE_ADMIN")     */    public function showRegistrarSalon(Request $request){        return $this->showRegisterForm(SalonType::class, new Salon(), $request);    }    //------------------------------------------------------------    /**     * @Route("/registrar/tag", name="registrarTag")     * @Secure(roles="ROLE_ADMIN")     */    public function showRegistrarTag(Request $request){        return $this->showRegisterForm(TagType::class, new Tag(), $request);    }	//------------------------------------------------------------------    /**     * @Route("/registrar/evento", name="registrarEvento");     * @Secure(roles="ROLE_ADMIN")	*/	public function regEvento(Request $request){        $evento = new Evento();        $form = $this->createForm(EventoType::class, $evento);        $form->handleRequest($request);                if($form->isValid() and $form->isSubmitted()){			$em = $this->getDoctrine()->getManager();			$em->persist($form->getData());			$em->flush();        }                    return $this->render('servicios/registrarEvento.html.twig',            array('form' => $form->createView())        );    }            /**     * @Route("/registrar/viaje", name="registrarViaje");     * @Secure(roles="ROLE_ADMIN")     */    public function regViaje(Request $request){        $viaje = new Viaje();        $form = $this->createForm(ViajeType::class, $viaje);        $form->handleRequest($request);                if($form->isValid() && $form->isSubmitted()){			$em = $this->getDoctrine()->getManager();			$em->persist($form->getData());			$em->flush();        }                    return $this->render('servicios/registrarViaje.html.twig',            array('form' => $form->createView())        );    }    /**     * @Route("/registrar/promocion", name="registrarPromocion")     * @Secure(roles="ROLE_ADMIN")     */    public function showRegistrarPromocion(Request $request){        return $this->showRegisterForm(PromocionType::class, new Promocion(), $request);    }    //---------------------------------------------------------    /**     * @Route("/registrar/itinerario", name="registrarItinerario")     * @Secure(roles="ROLE_ADMIN")     */    public function showRegistrarItinerario(Request $request){        return $this->showRegisterForm(ItinerarioType::class, new Itinerario(), $request);    }    /**     * @Route("/registrar/actividad", name="registrarActividad")     * @Secure(roles="ROLE_ADMIN")     */    public function showRegistrarActividad(Request $request){        return $this->showRegisterForm(ActividadType::class, new Actividad(), $request);    }    //----------------------------------------------------------    /**     * @Route("/registrar/cliente", name="registrarCliente")     * @Secure(roles="ROLE_ADMIN")     */    public function showRegistrarCliente(Request $request){        return $this->showRegisterForm(ClienteType::class, new Cliente(), $request);    }    /**     * @Route("/registrar/contrato", name="registrarContrato")     * @Secure(roles="ROLE_ADMIN")     */    public function showRegistrarContrato(Request $request){        return $this->showRegisterForm(ContratoType::class, new Contrato(), $request);    }    /**     * @Route("/registrar/usuario", name="registrarUsuario")     * @Secure(roles="IS_AUTHENTICATED_ANONYMOUSLY ")     */    public function showRegistrarUsuario(Request $request){        return $this->showRegisterForm(UsuarioType::class, new Usuario(), $request);    }    /**     * @Route("/registrar/sesion", name="registrarSesion")     * @Secure(roles="ROLE_USER ")     */    public function showRegistrarSesion(Request $request){        return $this->showRegisterForm(SesionType::class, new Sesion(), $request);    }    //----------------------------------------------------------    /**     * @Route("/registrar/foto", name="registrarFoto")     * @Secure(roles="ROLE_USER ")     */    public function showRegistrarFoto(Request $request){		dump($this->getUsuario());        return $this->showRegisterForm(FotoType::class, new Foto($this->getUser()), $request);    }    /**     * @Route("/registrar/comentario", name="registrarComentario")     * @Secure(roles="ROLE_USER ")     */    public function showRegistrarComentario(Request $request){		dump($this->getUser());        return $this->showRegisterForm(ComentarioType::class, new Comentario($this->getUser()), $request);    }    //-----------------------------------------------------------    //-----------------------------------------------------------    /**     * @Route("/formRegister/{entity}/{form_entity}", name="formRegister")     * @Secure(roles="ROLE_USER ")     */    public function showRegisterForm($entityTypeClass, $defaultObjEntity, Request $request){        $formEntity = $this->createForm($entityTypeClass, $defaultObjEntity);        $formEntity->handleRequest($request);        if($formEntity->isSubmitted() and $formEntity->isValid()){			$em = $this->getDoctrine()->getManager();            $em->persist($defaultObjEntity);            $em->flush();        }		return $this->render('members/generalRegister.html.twig', array(			'form' => $formEntity->createView()));            }}